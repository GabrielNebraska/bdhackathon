# Generated by Django 5.1.3 on 2024-11-29 20:10

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Cargo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("descricao", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Cliente",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("nome_cliente", models.CharField(max_length=45)),
                ("cnpj_cliente", models.CharField(max_length=14)),
                ("endereco_cliente", models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name="Estoque",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("endereco_estoque", models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name="Ferramentaspecas",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("nome_ferramentaspecas", models.CharField(max_length=45)),
                ("valor_ferramentaspecas", models.DecimalField(decimal_places=2, max_digits=10)),
                ("quantidade_ferramentaspecas", models.CharField(max_length=45)),
                ("marca", models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("imagem", models.ImageField(upload_to="imagens/")),
            ],
        ),
        migrations.CreateModel(
            name="Paralelismo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("superioresquerdo", models.CharField(max_length=5)),
                ("superiordireito", models.CharField(max_length=5)),
                ("inferioresquerdo", models.CharField(max_length=5)),
                ("inferiordireito", models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name="Relatorio",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("descricao_relatorio", models.CharField(max_length=45)),
                ("dificuldade_servico", models.IntegerField()),
                ("colaboracao_empresa", models.IntegerField()),
                ("data_inicial_servico", models.DateField()),
                ("data_final_servico", models.DateField()),
                ("pendencias_maquina", models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name="Usuario",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("nome", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("senha", models.CharField(max_length=128)),
                ("matricula", models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Verificacoespreventivas",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("paralelismo", models.IntegerField()),
                ("estiramento", models.IntegerField()),
                ("limpeza_equipamentos", models.IntegerField()),
                ("testes_movimento", models.IntegerField()),
                ("seguranca", models.IntegerField()),
                ("funcionamento_alimentador", models.IntegerField()),
                ("funcionamento_manipulador", models.IntegerField()),
                ("ruido_aparelho", models.IntegerField()),
                ("aquecimento_conforme_prog", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Funcionario",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("matricula", models.CharField(max_length=10)),
                (
                    "cargo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="funcionarios", to="hackathon.cargo"
                    ),
                ),
                (
                    "usuario",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT, related_name="funcionario", to="hackathon.usuario"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Orcamentos",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("descricao_orcamento", models.CharField(max_length=45)),
                ("datasolicitada_orcamento", models.DateField(auto_now_add=True)),
                ("valor_orcamento", models.DecimalField(decimal_places=2, default=None, max_digits=5)),
                ("tipo_orcamento", models.CharField(max_length=45, null=True)),
                (
                    "endereco_cliente",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="cliente", to="hackathon.cliente"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Servico",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("descricao_servico", models.CharField(max_length=45)),
                ("nome_servico", models.CharField(max_length=45)),
                ("status_concluido", models.BooleanField(default=False)),
                ("tipo_de_servico", models.IntegerField()),
                ("aparelho_seguro", models.BooleanField(default=True)),
                (
                    "cliente",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT, related_name="Cliente", to="hackathon.cliente"
                    ),
                ),
                (
                    "funcionario",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="hackathon.funcionario"),
                ),
                (
                    "orcamento",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="hackathon.orcamentos"),
                ),
                ("relatorio", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="hackathon.relatorio")),
            ],
        ),
        migrations.CreateModel(
            name="Administrador",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "usuario",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="administrador",
                        to="hackathon.usuario",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="relatorio",
            name="verificacoes_preventivas",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="IDverificacoespreventivas",
                to="hackathon.verificacoespreventivas",
            ),
        ),
    ]
